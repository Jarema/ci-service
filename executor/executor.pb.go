// Code generated by protoc-gen-go.
// source: executor.proto
// DO NOT EDIT!

/*
Package executor is a generated protocol buffer package.

It is generated from these files:
	executor.proto

It has these top-level messages:
	ExecutePipeline
	ResponseChunk
*/
package executor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ExecutePipeline struct {
	Id       int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Pipeline []byte `protobuf:"bytes,2,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (m *ExecutePipeline) Reset()                    { *m = ExecutePipeline{} }
func (m *ExecutePipeline) String() string            { return proto.CompactTextString(m) }
func (*ExecutePipeline) ProtoMessage()               {}
func (*ExecutePipeline) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ResponseChunk struct {
	Status int32  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Text   string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *ResponseChunk) Reset()                    { *m = ResponseChunk{} }
func (m *ResponseChunk) String() string            { return proto.CompactTextString(m) }
func (*ResponseChunk) ProtoMessage()               {}
func (*ResponseChunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*ExecutePipeline)(nil), "executor.ExecutePipeline")
	proto.RegisterType((*ResponseChunk)(nil), "executor.ResponseChunk")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for PipelineExecutor service

type PipelineExecutorClient interface {
	Execute(ctx context.Context, in *ExecutePipeline, opts ...grpc.CallOption) (PipelineExecutor_ExecuteClient, error)
}

type pipelineExecutorClient struct {
	cc *grpc.ClientConn
}

func NewPipelineExecutorClient(cc *grpc.ClientConn) PipelineExecutorClient {
	return &pipelineExecutorClient{cc}
}

func (c *pipelineExecutorClient) Execute(ctx context.Context, in *ExecutePipeline, opts ...grpc.CallOption) (PipelineExecutor_ExecuteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PipelineExecutor_serviceDesc.Streams[0], c.cc, "/executor.PipelineExecutor/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &pipelineExecutorExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PipelineExecutor_ExecuteClient interface {
	Recv() (*ResponseChunk, error)
	grpc.ClientStream
}

type pipelineExecutorExecuteClient struct {
	grpc.ClientStream
}

func (x *pipelineExecutorExecuteClient) Recv() (*ResponseChunk, error) {
	m := new(ResponseChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PipelineExecutor service

type PipelineExecutorServer interface {
	Execute(*ExecutePipeline, PipelineExecutor_ExecuteServer) error
}

func RegisterPipelineExecutorServer(s *grpc.Server, srv PipelineExecutorServer) {
	s.RegisterService(&_PipelineExecutor_serviceDesc, srv)
}

func _PipelineExecutor_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecutePipeline)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PipelineExecutorServer).Execute(m, &pipelineExecutorExecuteServer{stream})
}

type PipelineExecutor_ExecuteServer interface {
	Send(*ResponseChunk) error
	grpc.ServerStream
}

type pipelineExecutorExecuteServer struct {
	grpc.ServerStream
}

func (x *pipelineExecutorExecuteServer) Send(m *ResponseChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _PipelineExecutor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "executor.PipelineExecutor",
	HandlerType: (*PipelineExecutorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _PipelineExecutor_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("executor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xad, 0x48, 0x4d,
	0x2e, 0x2d, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x6c,
	0xb9, 0xf8, 0x5d, 0xc1, 0xec, 0xd4, 0x80, 0xcc, 0x82, 0xd4, 0x9c, 0xcc, 0xbc, 0x54, 0x21, 0x3e,
	0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0xa6, 0xcc, 0x14, 0x21, 0x29,
	0x2e, 0x8e, 0x02, 0xa8, 0x9c, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x9c, 0xaf, 0x64, 0xcd,
	0xc5, 0x1b, 0x94, 0x5a, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0xea, 0x9c, 0x51, 0x9a, 0x97, 0x2d, 0x24,
	0xc6, 0xc5, 0x56, 0x5c, 0x92, 0x58, 0x52, 0x5a, 0x0c, 0x35, 0x00, 0xca, 0x13, 0x12, 0xe2, 0x62,
	0x29, 0x49, 0xad, 0x28, 0x01, 0x1b, 0xc0, 0x19, 0x04, 0x66, 0x1b, 0x85, 0x72, 0x09, 0xc0, 0x2c,
	0x75, 0x85, 0xba, 0x47, 0xc8, 0x91, 0x8b, 0x1d, 0xea, 0x1e, 0x21, 0x49, 0x3d, 0xb8, 0xab, 0xd1,
	0x9c, 0x28, 0x25, 0x8e, 0x90, 0x42, 0xb1, 0x5e, 0x89, 0xc1, 0x80, 0x31, 0x89, 0x0d, 0xec, 0x47,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x41, 0x3b, 0xc7, 0xa2, 0xf5, 0x00, 0x00, 0x00,
}
